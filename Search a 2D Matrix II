// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution 1 - Brute force - 
TC - O(m * n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i = 0; i < matrix.length; i++)
        {
            for(int j = 0; j < matrix[0].length; j++)
            {
                if(matrix[i][j] == target)
                    return true;
            }
        }
        return false;
    }
}

-------------------------------------------------

Solution 2- Performing binary search on all rows
TC - O(m log n) or O(n log m)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        for(int i = 0; i < matrix.length; i++)
        {
            if(binarySearch(matrix[i], 0, matrix[i].length - 1, target))
                return true;
            
        }
        return false;
    }
    
    public boolean binarySearch(int[] a, int start, int end, int target)
    {
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            if(a[mid] == target)
                return true;
            else if(target < a[mid])
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return false;
    }
}



-------------------------------------------------

Solution 3 - 
Tc - O(m + n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int i = 0, j = matrix[0].length - 1;
        
        while(i >= 0 && j >= 0 && i < matrix.length && j < matrix[0].length)
        {
            if(matrix[i][j] == target)
                return true;
            else if(target < matrix[i][j])
            {
                j--;
            }
            else
            {
                i++;
            }
        }
        return false;
    }
}
