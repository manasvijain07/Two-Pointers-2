Solution 1 - Brute force - 
TC - O(m * n)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i = 0; i < matrix.length; i++)
        {
            for(int j = 0; j < matrix[0].length; j++)
            {
                if(matrix[i][j] == target)
                    return true;
            }
        }
        return false;
    }
}

------------------------------------------------------
Solution 2 - Performing binary search on the row that has value
TC - O(m + log n) or O(n + log m)
SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix.length == 0 || matrix == null)
            return false;
        
        for(int i = 0; i < matrix.length; i++)
        {
            if(matrix[i][0] <= target && matrix[i][matrix[i].length - 1] >= target)
            {
                return binarySearch(matrix[i], 0, matrix[i].length - 1, target);
            }
        }
        return false;
    }
    
    public boolean binarySearch(int[] a, int start, int end, int target)
    {
        while(start <= end)
        {
            int mid = start + (end - start)/2;
            if(a[mid] == target)
                return true;
            else if(target < a[mid])
            {
                end = mid - 1;
            }
            else
            {
                start = mid + 1;
            }
        }
        return false;
    }
}


------------------------------------------------------

Solution - Considering 2d as 1d array and finding mid the getting indexes of that mid in 2darray and applying binary search
          TC - O(log(m * n)) = O(log m) + O(log n)   where m - row size, n - col size of matrix
          SC - O(1)

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        if(matrix == null || matrix.length == 0)
            return false;
        
        int m = matrix.length, n = matrix[0].length;
        int low = 0, high = m * n - 1;
        
        while(low <= high)
        {
            int mid = low + (high - low)/2;
            int row = mid / n;
            int col = mid % n;
            
            if(matrix[row][col] == target)
                return true;
            else if (target > matrix[row][col])
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
        return false;
    }
}
